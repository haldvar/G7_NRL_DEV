// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NRL_PROJECT.Data;

#nullable disable

namespace NRL_PROJECT.Migrations
{
    [DbContext(typeof(NRL_Db_Context))]
    [Migration("20251029183153_AddAccessLevelDescription")]
    partial class AddAccessLevelDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("NRL_PROJECT.Models.AccessLevel", b =>
                {
                    b.Property<int>("AccessLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AccessLevelID"));

                    b.Property<string>("AccessLevelDescription")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AccessLevelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AccessLevelID");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.MapData", b =>
                {
                    b.Property<int>("MapDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MapDataID"));

                    b.Property<string>("GeoJsonCoordinates")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MapZoomLevel")
                        .HasColumnType("int");

                    b.HasKey("MapDataID");

                    b.ToTable("MapDatas");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.ObstacleData", b =>
                {
                    b.Property<int>("ObstacleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ObstacleId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MapDataID")
                        .HasColumnType("int");

                    b.Property<string>("ObstacleComment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("ObstacleHeight")
                        .HasColumnType("double");

                    b.Property<string>("ObstacleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("ObstacleWidth")
                        .HasColumnType("double");

                    b.HasKey("ObstacleId");

                    b.HasIndex("MapDataID");

                    b.ToTable("Obstacles");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.ObstacleReportData", b =>
                {
                    b.Property<int>("ObstacleReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ObstacleReportID"));

                    b.Property<int?>("MapDataID")
                        .HasColumnType("int");

                    b.Property<int?>("ObstacleID")
                        .HasColumnType("int");

                    b.Property<string>("ObstacleImageURL")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObstacleReportComment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ObstacleReportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ObstacleReportStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewedByUserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ObstacleReportID");

                    b.HasIndex("MapDataID");

                    b.HasIndex("ObstacleID");

                    b.HasIndex("ReviewedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("ObstacleReports");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.Organisation", b =>
                {
                    b.Property<int>("OrgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrgID"));

                    b.Property<string>("OrgContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("OrgID");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OrgID")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("OrgID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.UserRole", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<int>("AccessLevelID")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RoleID");

                    b.HasIndex("AccessLevelID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.ObstacleData", b =>
                {
                    b.HasOne("NRL_PROJECT.Models.MapData", "MapData")
                        .WithMany()
                        .HasForeignKey("MapDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapData");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.ObstacleReportData", b =>
                {
                    b.HasOne("NRL_PROJECT.Models.MapData", "MapData")
                        .WithMany("ObstacleReports")
                        .HasForeignKey("MapDataID");

                    b.HasOne("NRL_PROJECT.Models.ObstacleData", "Obstacle")
                        .WithMany("ObstacleReports")
                        .HasForeignKey("ObstacleID");

                    b.HasOne("NRL_PROJECT.Models.User", "Reviewer")
                        .WithMany("ObstacleReportsReviewed")
                        .HasForeignKey("ReviewedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NRL_PROJECT.Models.User", "User")
                        .WithMany("ObstacleReportsSubmitted")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MapData");

                    b.Navigation("Obstacle");

                    b.Navigation("Reviewer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.User", b =>
                {
                    b.HasOne("NRL_PROJECT.Models.Organisation", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrgID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NRL_PROJECT.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.UserRole", b =>
                {
                    b.HasOne("NRL_PROJECT.Models.AccessLevel", "AccessLevel")
                        .WithMany("UserRoles")
                        .HasForeignKey("AccessLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessLevel");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.AccessLevel", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.MapData", b =>
                {
                    b.Navigation("ObstacleReports");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.ObstacleData", b =>
                {
                    b.Navigation("ObstacleReports");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.Organisation", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.User", b =>
                {
                    b.Navigation("ObstacleReportsReviewed");

                    b.Navigation("ObstacleReportsSubmitted");
                });

            modelBuilder.Entity("NRL_PROJECT.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
