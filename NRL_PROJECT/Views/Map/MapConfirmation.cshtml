@using System.Text.Json
@model NRL_PROJECT.Models.MapData

@{
    ViewData["Title"] = "Map Confirmation";
    Layout = "_Layout";

    string jsGeoJson = "null";
    var coordList = new List<(double lat, double lng)>();

    if (!string.IsNullOrWhiteSpace(Model.GeoJsonCoordinates))
    {
        try
        {
            using var doc = JsonDocument.Parse(Model.GeoJsonCoordinates);
            var root = doc.RootElement;

            // Re-serialize to valid JSON for JS
            jsGeoJson = JsonSerializer.Serialize(root);

            // --- Extract coordinates for display ---
            if (root.TryGetProperty("type", out var typeProp))
            {
                var type = typeProp.GetString();

                if (type == "FeatureCollection" && root.TryGetProperty("features", out var features))
                {
                    foreach (var feature in features.EnumerateArray())
                    {
                        if (feature.TryGetProperty("geometry", out var geom) &&
                            geom.TryGetProperty("type", out var geomType) &&
                            geomType.GetString() == "Point" &&
                            geom.TryGetProperty("coordinates", out var coords) &&
                            coords.GetArrayLength() == 2)
                        {
                            double lng = coords[0].GetDouble();
                            double lat = coords[1].GetDouble();
                            coordList.Add((lat, lng));
                        }
                    }
                }
                else if (type == "Feature" && root.TryGetProperty("geometry", out var geom) &&
                         geom.TryGetProperty("coordinates", out var coords2) &&
                         coords2.GetArrayLength() == 2)
                {
                    double lng = coords2[0].GetDouble();
                    double lat = coords2[1].GetDouble();
                    coordList.Add((lat, lng));
                }
            }
            else if (root.ValueKind == JsonValueKind.Array && root.GetArrayLength() == 2)
            {
                // Handle bare [lng, lat]
                double lng = root[0].GetDouble();
                double lat = root[1].GetDouble();
                coordList.Add((lat, lng));
            }
        }
        catch
        {
            // leave empty if invalid JSON
        }
    }
}

<div class="max-w-4xl mx-auto px-4 py-10">
    <h1 class="text-4xl font-extrabold text-purple-700 text-center mb-4 tracking-wide">
        ✅ Map Confirmation
    </h1>
    <p class="text-gray-600 text-center mb-8">
        Your submitted coordinates have been received and visualized below.
    </p>

    <!-- Map Card -->
    <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
        <div id="mapConfirm" class="rounded-xl border border-gray-200 shadow-inner z-10" style="height: 450px;"></div>
        <p class="text-sm text-gray-500 mt-3">
            The point(s) you submitted are displayed on the map above.
        </p>
    </div>

    <!-- Coordinates Table -->
    <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
        <h2 class="text-xl font-semibold text-purple-700 mb-3 flex items-center">
            📍 Submitted Coordinates
        </h2>

        @if (coordList.Any())
        {
            <table class="min-w-full border border-gray-200 text-sm text-gray-800 rounded-lg overflow-hidden">
                <thead class="bg-gray-100 text-gray-700">
                    <tr>
                        <th class="px-4 py-2 border-b text-left">#</th>
                        <th class="px-4 py-2 border-b text-left">Latitude (Breddegrad)</th>
                        <th class="px-4 py-2 border-b text-left">Longitude (Lengdegrad)</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < coordList.Count; i++)
                    {
                        <tr class="odd:bg-white even:bg-gray-50">
                            <td class="px-4 py-2 border-b">@(@i + 1)</td>
                            <td class="px-4 py-2 border-b">@coordList[i].lat</td>
                            <td class="px-4 py-2 border-b">@coordList[i].lng</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="text-gray-500 italic">No valid coordinates found.</div>
        }
    </div>

    <!-- Action Buttons -->
    <div class="flex justify-center space-x-4">
        <a asp-action="Index" asp-controller="Home"
           class="bg-gray-600 text-white px-8 py-3 rounded-xl font-medium shadow-md hover:bg-gray-700 hover:shadow-lg transition">
            ⬅️ Back to Home
        </a>
        <a asp-action="MapView" asp-controller="Map"
           class="bg-blue-600 text-white px-8 py-3 rounded-xl font-semibold shadow-md hover:bg-blue-700 hover:shadow-lg transition">
            🗺️ Draw Again
        </a>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        const geojson = @Html.Raw(jsGeoJson);
        const defaultCenter = [58.333, 8.233];
        const map = L.map('mapConfirm').setView(defaultCenter, 13);

        L.tileLayer.wms('https://wms.geonorge.no/skwms1/wms.topo?', {
            layers: 'topo',
            format: 'image/png',
            transparent: false,
            attribution: '© Kartverket'
        }).addTo(map);

        if (geojson) {
            const layer = L.geoJSON(geojson, {
                pointToLayer: (feature, latlng) => L.marker(latlng)
            }).addTo(map);

            if (layer.getLayers().length > 0) {
                map.fitBounds(layer.getBounds(), { padding: [20, 20] });
            }
        }
    </script>

    <form asp-action="SubmitObstacleReport" asp-controller="Home" method="post">
        <input type="hidden" name="GeoJsonCoordinates" value="@Model.GeoJsonCoordinates" />
        <input type="hidden" name="ObstacleType" value="@TempData["ObstacleType"]?.ToString()" />
        <button type="submit"
                class="bg-green-600 text-white px-6 py-3 rounded-xl font-semibold shadow-md hover:bg-green-700 hover:shadow-lg transition">
            📤 Submit Report
        </button>
    </form>
    @{
        ViewBag.ObstacleType = TempData["ObstacleType"]?.ToString();
    }
}
